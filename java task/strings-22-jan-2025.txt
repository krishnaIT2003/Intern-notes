
STRINGS IN JAVA:
  
           A String in Java is a sequence of characters.
            It's represented by the String class in the java.lang package.
            Strings are immutable, meaning once a String object is created, it cannot be changed.


        String literals:
    
           String s1 = "Hello";
            String s2 = "Hello"; // Points to the same object in the string pool

             NOTE: Java stores strings created with literals in a string pool for memory efficiency.

     
          Using new Keyword:
  
                 String s3 = new String("Hello");
                  String s4 = new String("Hello"); // Creates a new object in the heap

                  NOTE: This creates a new object in the heap memory even if the same string exists in the pool.

     


           ...................................Why Are Strings Immutable.......................................
                               Once a String is created, its value cannot be changed. 
                   For example:

                      String s = "Hello";
                          s.concat(" World"); // Creates a new String object "Hello World"
                     System.out.println(s); // Outputs "Hello"

                            NOTE: Immutability ensures security, thread safety, and efficient memory usage by allowing string pooling.



           Comparing Strings: 
  
                        == compares the address of the object or memory location of the objects
                       
                        equals() will compare the content or values of the string





      StringBuilder and StringBuffer are mutable and provide an efficient way to perform string manipulations.


    
        STRING BUILDER:   


          StringBuilder is a mutable sequence of characters, specifically designed for single-threaded environments.



                  Thread-Safety: Not synchronized. This means it’s faster in non-concurrent contexts because there's no overhead of synchronization.

                     Use Cases: It's perfect for string manipulations when you don't have to worry about thread safety. For example, in scenarios like building a query string or modifying a string in a loop.

 
                 How It Works:
                       StringBuilder operates by maintaining a dynamic array of characters. As the string grows or shrinks, it reallocates memory automatically, making sure that it can always accommodate the required number of characters.







           STRING BUFFER:


                 StringBuffer is also a mutable sequence of characters but with synchronization for thread safety.
 
    
                Thread-Safety: Synchronized. This means it can safely be used by multiple threads at the same time. However, this synchronization comes at a cost – it’s slower compared to StringBuilder.
               
                 
                 How It Works:
                 Like StringBuilder, StringBuffer also maintains a dynamic character array. However, every method that modifies the content of the string is synchronized, ensuring that no two threads can modify the same object at the
                same time.





    ENUMS IN JAVA: 

             An enum (short for "enumeration") is a special class in Java that represents a group of constants.Using enums, you can define a set of named constants for variables that are fixed in nature.


Enums make your code more readable, type-safe, and maintainable. They're particularly useful when you have a fixed set of related constants, like days of the week, months, states, etc.


 example:
     enum Day {
    SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY;
}


GENERICS IN JAVA:

   Generics in Java allow you to write more flexible, reusable, and type-safe code. They enable you to define classes, interfaces, and methods with placeholder types that can be replaced with specific types at the time of usage.
     This helps to avoid the need for type casting and ensures type safety during compile-time.


Note: Generic methods only accept Wrapper classes


    Type Safety: Generics ensure that you can work with different types but still enforce type checks during compilation. This avoids ClassCastException during runtime.


    SYNTAX:
           class ClassName<T> {  // T is the type parameter
     private T object;

    public void setObject(T object) {
        this.object = object;
            }
 
     public T getObject() {
        return object;
              }
            }


 
           WildCard in Generics: 
   
              Wildcards (?) are used when you don’t know what type to use in a generic class or method. 

           There are three types of wildcards:

                        Unbounded Wildcard (?): Used when you don’t know the type.
                       Upper Bounded Wildcard (? extends T): Restricts the type to be a subclass of T.
                       Lower Bounded Wildcard (? super T): Restricts the type to be a superclass of T.
















































