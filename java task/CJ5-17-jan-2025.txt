
POLYMORPHISM IN JAVA:
     Polymorphism is one of the core concepts of Object-Oriented Programming (OOP) that allows objects to take on multiple forms. The word polymorphism is derived from the Greek words poly (many) and morph (forms), meaning "many forms."

            In Java, polymorphism enables a single interface to be used for different types of objects. This increases flexibility, modularity, and reusability in code.

   two types of polymorphism:
        compile time polymorphism
                 Definition: Polymorphism is determined at compile time.
                 Achieved Through: Method Overloading.
                 Key Idea: Methods in the same class with the same name but different parameter lists.


        run time polymorpism
            Definition: Polymorphism is determined at runtime.
            Achieved Through: Method Overriding.
            Key Idea: A subclass provides a specific implementation for a method that is already defined in its parent class.

        


         STATIC BINDING:
             Definition: The method call is resolved at compile time.
              Key Features:
             Used for private, static, and final methods, as well as methods in the same class.
                Overloading is an example of static binding.
             Why Static?: Because these methods cannot be overridden, the method to be called is decided during compilation.
example : Dog dog=new Dog()


          DYNAMIC BINDING:
             Definition: The method call is resolved at runtime.
          Key Features:
             Used for overridden methods in an inheritance hierarchy.
              Method overriding is an example of dynamic binding.
               Why Dynamic?: Because the actual object being referenced may vary at runtime, the method implementation is determined then.   
 example: Animal animal=new Dog();


   ABSTRACT CLASS:

     An abstract class in Java is a class that cannot be instantiated directly. It serves as a blueprint for other classes and may contain both abstract methods 
     (without implementation) and concrete methods (with implementation). 
    
      Cannot be instantiated: You cannot create objects of an abstract class.
     Abstract methods:
      Declared without a body (abstract void methodName();).
      Must be implemented by subclasses.
      Concrete methods: Abstract classes can also have methods with implementation.
     Constructors: Abstract classes can have constructors, which are called when a subclass object is created.
      Inheritance: Abstract classes are meant to be extended by other classes.
      

    Why Use Abstract Classes?
       To provide a common template or base for related classes.
       To enforce implementation of certain methods in subclasses.
       To share common behavior among multiple subclasses.


     THIS KEYWORD :

            The this keyword in Java is a reference variable that refers to the current object of a class. It is primarily used to eliminate confusion between class attributes and method parameters, and to refer to the current object in various contexts.

                Use this to distinguish between instance variables and method parameters when they have the same name.
                Use this() to call another constructor within the same class (constructor chaining).
                Use this to call another method in the same class.


     
   INTERFACE :

         An interface in Java is a blueprint of a class that defines a set of methods that a class must implement. It provides a way to achieve 100% abstraction (before Java 8) and allows classes to adhere to a specific contract without concerning themselves with the actual implementation.
              All methods in an interface are implicitly public and abstract (before Java 8).
              From Java 8 onward, interfaces can have default and static methods with implementations.
              A class can implement multiple interfaces, allowing for a form of multiple inheritance in Java.
              Interfaces with a single abstract method (FUNCTIONAL INTERFACE) can be used as lambda expressions (introduced in Java 8).
              Interfaces cannot have constructors because they cannot be instantiated.
             
               note: static method in interface can be called using Interface name 
              
             Why Use Interfaces?
               To achieve abstraction.
               To define a contract that implementing classes must follow.
               To achieve multiple inheritance.
               To support polymorphism in design.


        Comparison: Abstract Class vs Interface
Aspect	                 Abstract Class	                                       Interface
Methods 	Can have abstract and concrete methods	         Abstract, default, and static methods
Variables	Can have instance variables	           Only static final constants
Constructors	Can have constructors	                     Cannot have constructors
Inheritance	Single inheritance	                      Multiple inheritance
Performance	Slightly faster	                            Slightly slower (due to dynamic dispatch)


   PACKAGES:
     In Java, a package is a namespace that organizes classes and interfaces, making them easier to manage and access. Think of it as a folder in your computer where related files are grouped together. Packages help avoid naming conflicts and provide access protection for classes.


            Types of Packages in Java
             Built-in Packages: Predefined packages provided by Java (e.g., java.util, java.io, java.net).
             User-defined Packages: Packages created by developers to organize their code.

         Why Use Packages?
           Organize Code: Group related classes and interfaces together.
           Avoid Naming Conflicts: Prevent clashes between classes with the same name.
          Access Protection: Control access to classes and methods.
          Reusability: Packages can be easily imported and reused across multiple projects.



 Compiling and Running the Code
Compile: Use the -d flag to specify the base directory for the package.
javac -d . MyClass.java

This creates a folder mypackage and stores MyClass.class inside it.

Run: Use the fully qualified class name to run the program.
java mypackage.MyClass


  Access Modifiers in Java:
       Access modifiers in Java determine the visibility and accessibility of classes, methods, variables, and constructors. They help define how members of a class can be accessed from 
        other classes or packages.

                Private Access Modifier
                        Scope: Visible only within the class where it is declared.
                        Use Case: To encapsulate data and prevent external access.
               
              
                Default (Package-Private) Access Modifier
                Scope: Visible to all classes within the same package.
                Use Case: For package-level functionality.

         Protected Access Modifier
Scope:
Visible to classes in the same package.
Visible to subclasses, even in different packages.
Use Case: For inheritance where subclasses need access to superclass members.


Public Access Modifier
Scope: Visible to all classes everywhere (global access).
Use Case: For APIs or functionalities intended to be accessed from anywhere.


Real-Life Analogy
Private: Your ATM PIN (only you can access it).
Default: Office files visible only to coworkers.
Protected: Family photos shared with extended family.
Public: Public park accessible by everyone.



we cant give private and protected to the top classes 
we can only give private and protected to the nested classes



 GARBAGE COLLECTION:
  
                Garbage Collection (GC) in Java is the process of automatically reclaiming memory by removing unused objects from the heap.
                 It is part of Java's memory management and ensures efficient utilization of memory, preventing memory leaks.
          
                 it is built in jvm
                     Heap Memory Focus: Only objects in the heap are managed by the Garbage Collector.

             Reference Checking:
                The Garbage Collector monitors whether an object is referenced.
                 If no references exist, the object becomes eligible for garbage collection.

                 GC Algorithm Execution:
                  The Garbage Collector runs to free memory by reclaiming unreachable objects.


               You can suggest garbage collection using:
                           System.gc(); // Suggests the JVM to run garbage collection
                            Runtime.getRuntime().gc(); // Alternative suggestion

            Garbage Collection Process
                     Mark: Identify objects that are still in use (reachable).
                         Sweep: Remove unused objects from memory.
                           Compact: Rearrange memory to avoid fragmentation (optional).

            
                System.gc() or Runtime.getRuntime().gc() can suggest the JVM to run the garbage collector, and when an object is garbage collected,
                 its finalize() method will be invoked before the memory is reclaimed.





              FINAL KEYWORD:


                final with Variables
                     A variable declared as final becomes a constantâ€”it cannot be reassigned after being initialized.
                       Key Points:
                  Local Variables:
                        Must be initialized at the time of declaration or in the constructor.
                  Instance Variables:
                       Can be initialized in the constructor if not initialized during declaration.
                      Static Final Variables:
                         Commonly used to define constants.
                                  Must be initialized at the time of declaration or in a static block.



               final with Methods
                   A method declared as final cannot be overridden by subclasses.

             final with Classes 
                A class declared as final cannot be extended.

            Note: for final methods we can overload the methods but we cant override the methods.

      
  
              Variable	Cannot change its value after initialization.
              Method	Prevents overriding in subclasses.
              Class	Prevents inheritance; no subclass can be created.






































































 